package com.vjgarcia.moviereviews.data

import android.content.Context
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import com.vjgarcia.moviereviews.data.local.MovieReviewDao
import com.vjgarcia.moviereviews.data.local.MovieReviewEntity
import com.vjgarcia.moviereviews.data.local.MovieReviewsDatabase
import junit.framework.TestCase.assertEquals
import junit.framework.TestCase.assertTrue
import kotlinx.coroutines.runBlocking
import org.junit.After
import org.junit.Before
import org.junit.Test

class MovieReviewDaoTest {

    private lateinit var database: MovieReviewsDatabase

    private lateinit var sut: MovieReviewDao

    @Before
    fun setUp() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        database = Room.inMemoryDatabaseBuilder(context, MovieReviewsDatabase::class.java).build()

        sut = database.movieReviewDao()
    }

    @After
    fun tearDown() {
        database.close()
    }

    @Test
    fun get_emptyMovieReviews() = runBlocking {
        val movieReviews = sut.get()

        assertTrue(movieReviews.isEmpty())
    }

    @Test
    fun writeAnyMovieReviews_getAnyMovieReviews() = runBlocking {
        val anyMovieReviews = anyMovieReviews()

        sut.insertAll(anyMovieReviews)
        val movieReviews = sut.get()

        assertEquals(anyMovieReviews, movieReviews)
    }

    @Test
    fun insertMovieReviewsWithId0_idsAutogeneratedCorrectly() = runBlocking {
        val anyMovieReviews = anyMovieReviews().map { it.copy(id = 0) }

        sut.insertAll(anyMovieReviews)
        val movieReviews = sut.get()

        // check entities now have the proper id from 1 to n
        val expectedMovieReviews = anyMovieReviews.mapIndexed { id, item -> item.copy(id = id + 1) }
        assertEquals(expectedMovieReviews, movieReviews)
    }

    @Test
    fun getWithOffset() = runBlocking {
        val anyMovieReviews = anyMovieReviews().map { it.copy(id = 0) }

        sut.insertAll(anyMovieReviews)
        val movieReviews = sut.get(offset = 1)

        assertEquals(listOf(anyMovieReviews.last().copy(id = 2)), movieReviews)
    }

    @Test
    fun getWithLimitAndOffset() = runBlocking {
        val anyMovieReviews = (anyMovieReviews() + anyMovieReviews()).mapIndexed { index, movieReview ->
            movieReview.copy(id = 0, displayTitle = "Movie $index")
        }

        sut.insertAll(anyMovieReviews)
        val movieReviews = sut.get(limit = 3, offset = 1)

        val expectedMovieReviews = anyMovieReviews.mapIndexed { index, movieReviewEntity ->
            movieReviewEntity.copy(id = index + 1)
        }.subList(1, 4)
        assertEquals(expectedMovieReviews, movieReviews)
    }

    private fun anyMovieReviews() = listOf(
        MovieReviewEntity(
            id = 1,
            displayTitle = "displayTitle 1",
            mpaaRating = "+18",
            reviewAuthor = "Víctor J.",
            headline = "This is a STRONG headline",
            reviewPublicationDate = "2020-09-23",
            movieOpeningDate = "2020-09-22",
            linkUrl = "https://www.github.com/vjgarciag96",
            linkTitle = "SPAM",
            imageUrl = "https://www.github.com/vjgarciag96/invent.png",
        ),
        MovieReviewEntity(
            id = 2,
            displayTitle = "displayTitle 2",
            mpaaRating = "+55",
            reviewAuthor = "Julián V.",
            headline = "This is a wrong headline",
            reviewPublicationDate = "2020-09-22",
            movieOpeningDate = "2020-09-23",
            linkUrl = "https://www.github.com/vjgarciag95",
            linkTitle = "MAPS",
            imageUrl = "https://www.github.com/vjgarciag95/invent.png",
        )
    )
}